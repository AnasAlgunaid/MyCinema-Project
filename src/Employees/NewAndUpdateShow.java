/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Employees;
import Employees.EmployeeSystem;
import Employees.ShowsForm;
import com.raven.datechooser.SelectedDate;
import com.raven.event.EventTimePicker;
import java.awt.Color;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.util.Date;
import java.util.concurrent.TimeUnit;
/**
 *
 * @author anasm
 */
public class NewAndUpdateShow extends javax.swing.JDialog {

    /**
     * Creates new form NewAndUpdateShow
     */
    ArrayList<Integer> theatersNum;
    ArrayList<Integer> moviesID;
    private int selectedShowID = -1;

    public void setSelectedShowID(int selectedShowID) {
        this.selectedShowID = selectedShowID;
    }
    
    private void loadMoviesIntoComboBox(){
        final String getMoviesQuery = "SELECT Movie_ID, Movie_Name FROM Movies";
        try(        
            Statement selectMovies = EmployeeSystem.connection.createStatement();
            ResultSet movies = selectMovies.executeQuery(getMoviesQuery);
            ){
            
            // Store movies' id
            moviesID = new ArrayList<>();
            
            while(movies.next()){
                moviesID.add(movies.getInt(1));
                moviesComboBox.addItem(movies.getInt(1) + " - " + movies.getString(2));
            }    
             
            moviesComboBox.setSelectedIndex(-1);
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void loadTheatersIntoComboBox(){
        final String getTheatersQuery = "SELECT Theater_Number, Theater_Types.Type_Name, Number_of_Seats FROM Theaters INNER JOIN Theater_Types ON Theaters.Theater_Type = Theater_Types.Type_ID";
        try(        
            Statement selectTheaters = EmployeeSystem.connection.createStatement();
            ResultSet theaters = selectTheaters.executeQuery(getTheatersQuery);
            ){
            
            // Store theaters' numbers
            theatersNum = new ArrayList<>();            
            while(theaters.next()){
                theatersNum.add(theaters.getInt(1));
                theatersComboBox.addItem(theaters.getInt(1) + " - " + theaters.getString(2) + " | Seats: " + theaters.getInt(3));
            } 
            
            theatersComboBox.setSelectedIndex(-1); 
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private String convert12to24(){
        String selectedHour = timeField.getText().substring(0, 2 );
        int hour = Integer.parseInt(selectedHour);
        
        if(timeField.getText().charAt(7) == 'M'){
            if(hour == 12){
                selectedHour = "00";
            }
            return (selectedHour+ timeField.getText().substring(2, 5 ) + ":00");
        }
        
        else{

            if(hour < 12){
                hour = hour + 12;
                selectedHour = hour + "";
            }
            return (selectedHour +  timeField.getText().substring(2, 5 ) + ":00");
        }
    }
    
    public NewAndUpdateShow(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
       
        initComponents();


        
            timePicker.addEventTimePicker(new EventTimePicker(){
            @Override
            public void timeSelected(String string) {
//                timeField.setText(timeField.getText().replaceAll("MP", "PM") );   
                timeField.setText(convert12to24());
            }
        });
            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooser = new com.raven.datechooser.DateChooser();
        timePicker = new com.raven.swing.TimePicker();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        moviesComboBox = new javax.swing.JComboBox<>();
        dateField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        timeField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        theatersComboBox = new javax.swing.JComboBox<>();
        actionButton = new javax.swing.JButton();
        dateLabel = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        movieLabel = new javax.swing.JLabel();
        theaterLabel = new javax.swing.JLabel();

        dateChooser.setForeground(new java.awt.Color(21, 122, 255));
        dateChooser.setTextRefernce(dateField);

        timePicker.setForeground(new java.awt.Color(21, 122, 255));
        timePicker.setDisplayText(timeField);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(21, 122, 255));

        titleLabel.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("New Show");
        titleLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                titleLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(130, 142, 156));
        jLabel3.setText("Movie");

        moviesComboBox.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        moviesComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        moviesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moviesComboBoxActionPerformed(evt);
            }
        });

        dateField.setBackground(new java.awt.Color(246, 247, 249));
        dateField.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        dateField.setForeground(new java.awt.Color(21, 22, 29));
        dateField.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        dateField.setCaretColor(new java.awt.Color(21, 22, 29));
        dateField.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        dateField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dateFieldMouseClicked(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(130, 142, 156));
        jLabel5.setText("Date");

        timeField.setBackground(new java.awt.Color(246, 247, 249));
        timeField.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        timeField.setForeground(new java.awt.Color(21, 22, 29));
        timeField.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        timeField.setCaretColor(new java.awt.Color(21, 22, 29));
        timeField.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        timeField.setDisabledTextColor(new java.awt.Color(21, 22, 29));
        timeField.setEnabled(false);
        timeField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timeFieldMouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(130, 142, 156));
        jLabel6.setText("Time");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(130, 142, 156));
        jLabel8.setText("Theater");

        theatersComboBox.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        theatersComboBox.setForeground(new java.awt.Color(21, 22, 29));
        theatersComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        theatersComboBox.setFocusable(false);
        theatersComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                theatersComboBoxActionPerformed(evt);
            }
        });

        actionButton.setBackground(new java.awt.Color(21, 122, 255));
        actionButton.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        actionButton.setForeground(new java.awt.Color(255, 255, 255));
        actionButton.setText("Add Show");
        actionButton.setBorder(null);
        actionButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        actionButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                actionButtonFocusGained(evt);
            }
        });
        actionButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                actionButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                actionButtonMouseExited(evt);
            }
        });
        actionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionButtonActionPerformed(evt);
            }
        });

        dateLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        dateLabel.setForeground(new java.awt.Color(255, 35, 71));

        price.setBackground(new java.awt.Color(246, 247, 249));
        price.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        price.setForeground(new java.awt.Color(21, 22, 29));
        price.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        price.setCaretColor(new java.awt.Color(21, 22, 29));
        price.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                priceFocusGained(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(130, 142, 156));
        jLabel7.setText("Price");

        priceLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        priceLabel.setForeground(new java.awt.Color(255, 35, 71));

        timeLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        timeLabel.setForeground(new java.awt.Color(255, 35, 71));

        movieLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        movieLabel.setForeground(new java.awt.Color(255, 35, 71));

        theaterLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        theaterLabel.setForeground(new java.awt.Color(255, 35, 71));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(priceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(price)
                            .addComponent(actionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(theatersComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(theaterLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(movieLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(moviesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(dateField)
                            .addComponent(timeField))
                        .addGap(46, 46, 46))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(moviesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(movieLabel)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(dateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(timeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(theaterLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(theatersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(priceLabel))
                .addGap(3, 3, 3)
                .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(actionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void dateFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dateFieldMouseClicked
        dateLabel.setText("");
        timeLabel.setText("");
    }//GEN-LAST:event_dateFieldMouseClicked

    private void timeFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeFieldMouseClicked
        if(timePicker.getDisplayText() == null){
            timePicker.setDisplayText(timeField);
        }
        timePicker.showPopup(this, 100, 100);
        dateLabel.setText("");
        timeLabel.setText("");
    }//GEN-LAST:event_timeFieldMouseClicked

    private void actionButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_actionButtonFocusGained

    }//GEN-LAST:event_actionButtonFocusGained

    private void actionButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actionButtonMouseEntered
        actionButton.setBackground(new Color(68, 149, 255));
    }//GEN-LAST:event_actionButtonMouseEntered

    private void actionButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actionButtonMouseExited
        actionButton.setBackground(new Color(21, 122, 255));
    }//GEN-LAST:event_actionButtonMouseExited

    private void actionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionButtonActionPerformed
        boolean noEmptyFields = true;
        // Check if there is a selected movie
        if(moviesComboBox.getSelectedIndex() < 0){
            movieLabel.setText("Please choose a movie");
            noEmptyFields = false;
        }
        // Check if there is a selected theater
        if(theatersComboBox.getSelectedIndex() < 0){
            theaterLabel.setText("Please choose a theater");
            noEmptyFields = false;
        }
        // Check if the price is empty
        if(price.getText().isEmpty()){
            priceLabel.setText("Please fill this field");
            noEmptyFields = false;
        }
        if(noEmptyFields){
            boolean validPrice = true;
            double showPrice = 0;
            
            // Check if the price is number
            try{
                showPrice = Double.parseDouble(price.getText());
            }catch(NumberFormatException e){
                validPrice = false;
            }

            // Check if the price is valid
            if(!validPrice){
                priceLabel.setText("Enter a valid price");
            }else{
                // Get the date and time now
                Date dateNow = new Date();
                Timestamp now = new Timestamp(dateNow.getTime());

                // Get the selected date and time and convert them into Timestamp
                SelectedDate selectedDate = dateChooser.getSelectedDate();
                String selectedDateFormatting = selectedDate.getYear() + "-" + selectedDate.getMonth() + "-" + selectedDate.getDay();
                Timestamp startTime = Timestamp.valueOf(selectedDateFormatting + " " + timeField.getText());

                if(startTime.compareTo(now) <= 0){
                    dateLabel.setText("Show cannot be in the past");
                    timeLabel.setText("Show cannot be in the past");
                }else{
                    
                    final String THEATER_AVAILABILITY_QUERY = "SELECT Show_ID, Theater_Number, Start_Time, End_Time FROM Show_Times WHERE Theater_Number = ? AND ((? BETWEEN Start_Time AND End_Time) OR (? BETWEEN Start_Time AND End_Time)) ";

                    // Get the number of the selected theater
                    int selectedMovieID = moviesID.get(moviesComboBox.getSelectedIndex());
                    
                    // Query to get the runtime of the selectd movie 
                    final String MOVIE_RUNTIME = "SELECT Runtime FROM Movies WHERE Movie_ID = " + selectedMovieID;
                                        
                    // Get the ID of the selected movie
                    int selectedTheaterNum = theatersNum.get(theatersComboBox.getSelectedIndex());
                    
                    // Copy the satrt time to the endtime
                    Timestamp endTime = null;
                    if(startTime != null){
                        endTime = (Timestamp) startTime.clone();
                    }

                    ResultSet availabilityResultSet = null;
                    try(
                        PreparedStatement checkTheaterAvailability = EmployeeSystem.connection.prepareStatement(THEATER_AVAILABILITY_QUERY);
                        Statement getRunTime = EmployeeSystem.connection.createStatement();
                        ResultSet runTimeResultSet = getRunTime.executeQuery(MOVIE_RUNTIME);)
                    {
                        // Get the runtime of the selected movie
                        runTimeResultSet.next();
                        int movieDuration = runTimeResultSet.getInt(1);
                        
                        // Calculate the end time
                        endTime.setTime(endTime.getTime() + TimeUnit.MINUTES.toMillis(movieDuration));
                        
                        // Set the prepared statement parameters
                        checkTheaterAvailability.setInt(1, selectedTheaterNum);
                        checkTheaterAvailability.setTimestamp(2, startTime);
                        checkTheaterAvailability.setTimestamp(3, endTime);
                        
                        // Execute the query
                        availabilityResultSet = checkTheaterAvailability.executeQuery();
                        
                        // If there are resuls this means the theater is not available at the selected time
                        if(availabilityResultSet.next()){
                            if(availabilityResultSet.getInt(1) != selectedShowID){
                                JOptionPane.showMessageDialog(null, "The theater is not available at this time, Please choose another theater or change the time", "Theater is not available", JOptionPane.ERROR_MESSAGE);
                                return;
                            }
                        }
                    }catch(SQLException e){
                        JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.ERROR_MESSAGE);     
                    }finally{
                        // Close the result set
                        if(availabilityResultSet != null){
                            try{
                                availabilityResultSet.close();
                            }catch(SQLException e){
                                JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.ERROR_MESSAGE);     

                            }
                        }
                    }

                    // SQL Statement: Insert 
                    final String INSERT_SHOW = "INSERT INTO Shows(Movie_ID, Theater_Number, Start_Time, Price, Available_Seats) VALUES(?, ?, ?, ?, ?)";
                    
                    // SQL Statement: Update 
                    final String UPDATE_SHOW_QUERY = "UPDATE Shows SET Movie_ID = ?, Theater_Number = ?, Start_Time = ?, Price = ?, Available_Seats = ? WHERE Show_ID = " + selectedShowID;
                    
                    // To store the success message depends on the operation (Add or update)
                    String successMessage;
                    
                    // To store the sql statement that will be executed
                    String InsertUpdateQuery;
                    
                    // If the operation is update
                    if(selectedShowID > 0){
                        InsertUpdateQuery = UPDATE_SHOW_QUERY;
                        successMessage = "Show #" + selectedShowID + " Updated Successfully";
                    }else{
                        InsertUpdateQuery = INSERT_SHOW;
                        successMessage = "Show added successfully";
                    }
                    
                    // Query to get the number of seats of the selected theater
                    final String THEATER_CAPACITY_QUERY = "SELECT Number_of_Seats FROM Theaters WHERE Theater_Number = " + selectedTheaterNum;
                    
                    // Insert the new show
                    try(
                        PreparedStatement newShow = EmployeeSystem.connection.prepareStatement(InsertUpdateQuery);
                        Statement getTheaterCapacity = EmployeeSystem.connection.createStatement();
                        ResultSet theaterCapacityResultSet = getTheaterCapacity.executeQuery(THEATER_CAPACITY_QUERY);
                    ){
                        newShow.setInt(1, selectedMovieID);
                        newShow.setInt(2, selectedTheaterNum);
                        newShow.setTimestamp(3, startTime);
                        newShow.setDouble(4, showPrice);
                        
                        // The number of the available seats = The capacity of the theater
                        if(theaterCapacityResultSet.next()){
                            newShow.setInt(5, theaterCapacityResultSet.getInt(1));
                        }
                        
                        // Show success message if the show is added
                        if(newShow.executeUpdate() == 1){
                            JOptionPane.showMessageDialog(null, successMessage, "Show added success", JOptionPane.INFORMATION_MESSAGE);
                            
                            // Clear the form
                            moviesComboBox.setSelectedIndex(-1);
                            theatersComboBox.setSelectedIndex(-1);
                            price.setText("");
                            
                            // Refresh the table of shows
                            ShowsForm.refreshTable();
                            
                            // Dispose the dialog after the update
                            if(selectedShowID > 0){
                                this.dispose();
                            }
                        }

                    }catch(SQLException e){
                        JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }

        }
    }//GEN-LAST:event_actionButtonActionPerformed

    private void priceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_priceFocusGained
        priceLabel.setText("");
    }//GEN-LAST:event_priceFocusGained

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        // Load the movies and the theater from the database
        loadMoviesIntoComboBox();
        loadTheatersIntoComboBox();
        
        if(selectedShowID > 0){
            titleLabel.setText("Update Show");
            actionButton.setText("Update Show");

            final String SELECTED_SHOW_QUERY = "SELECT Movie_ID, Theater_Number, Start_Time, Price FROM Shows WHERE Show_ID = " + selectedShowID;
            try(Statement getSelectedShow = EmployeeSystem.connection.createStatement();
                ResultSet selectedShowResultSet = getSelectedShow.executeQuery(SELECTED_SHOW_QUERY))
            {
                if(selectedShowResultSet.next()){
                    moviesComboBox.setSelectedIndex(moviesID.indexOf(selectedShowResultSet.getInt(1)));
                    theatersComboBox.setSelectedIndex(theatersNum.indexOf(selectedShowResultSet.getInt(2)));    
                    
                    // Get the old start time and split the date and time
                    String oldStartTime = selectedShowResultSet.getString(3);
                    String [] startTimeParts = oldStartTime.split(" ");
                    
                    try{
                        dateChooser.setSelectedDate(new SimpleDateFormat("yyyy-MM-dd").parse(startTimeParts[0]));
                    }catch(ParseException e){
                        System.out.println(e.getMessage());
                    }
                    
                    // Set the timePicker to null and then get the old time from the startTimeParts
                    timePicker.setDisplayText(null);
                    timeField.setText(startTimeParts[1]);
                    
                    price.setText(selectedShowResultSet.getString(4));
                }
 
            }catch(SQLException e){
                JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_formWindowOpened

    private void titleLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_titleLabelMouseClicked
       
    }//GEN-LAST:event_titleLabelMouseClicked

    private void moviesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moviesComboBoxActionPerformed
        movieLabel.setText("");
    }//GEN-LAST:event_moviesComboBoxActionPerformed

    private void theatersComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_theatersComboBoxActionPerformed
        theaterLabel.setText("");
    }//GEN-LAST:event_theatersComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewAndUpdateShow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewAndUpdateShow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewAndUpdateShow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewAndUpdateShow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NewAndUpdateShow dialog = new NewAndUpdateShow(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actionButton;
    private com.raven.datechooser.DateChooser dateChooser;
    private javax.swing.JTextField dateField;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel movieLabel;
    private javax.swing.JComboBox<String> moviesComboBox;
    private javax.swing.JTextField price;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JLabel theaterLabel;
    private javax.swing.JComboBox<String> theatersComboBox;
    private javax.swing.JTextField timeField;
    private javax.swing.JLabel timeLabel;
    private com.raven.swing.TimePicker timePicker;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
